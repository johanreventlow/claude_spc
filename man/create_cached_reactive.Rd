% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_performance.R,
%   R/utils_performance_caching.R
\name{create_cached_reactive}
\alias{create_cached_reactive}
\title{Create cached reactive expression with session-local cache}
\usage{
create_cached_reactive(
  reactive_expr,
  cache_key,
  cache_timeout = CACHE_CONFIG$default_timeout_seconds,
  cache_size_limit = CACHE_CONFIG$size_limit_entries
)

create_cached_reactive(
  reactive_expr,
  cache_key,
  cache_timeout = CACHE_CONFIG$default_timeout_seconds,
  cache_size_limit = CACHE_CONFIG$size_limit_entries
)
}
\arguments{
\item{reactive_expr}{Reactive expression at cache}

\item{cache_key}{Character string eller function der genererer cache key}

\item{cache_timeout}{Timeout i sekunder (default: CACHE_CONFIG$default_timeout_seconds)}

\item{cache_size_limit}{Maximum antal cache entries (default: 50)}

\item{expr}{Reactive expression der skal caches}

\item{session}{Shiny session object (optional - auto-detected if available)}
}
\value{
Cached reactive expression eller function (context-afhængig)

Cached reactive expression
}
\description{
Wrapper omkring shiny::reactive() der tilføjer intelligent caching
for expensive operations. Cache invalideres automatisk
når dependencies ændres. Bruger session-local cache for isolation.

Wrapper around reactive expressions med caching til expensive operations.
Implementerer memoization med digest-based cache keys.
}
\examples{
\dontrun{
# Cache expensive data processing
processed_data <- create_cached_reactive(
  {
    expensive_data_processing(app_state$data$current_data)
  },
  "data_processing",
  cache_timeout = 600,
  session = session
)
}

# Auto-detection caching
cached_autodetect <- create_cached_reactive(
  {
    detect_columns_full_analysis(data, app_state)
  },
  "autodetect",
  cache_timeout = CACHE_CONFIG$extended_timeout_seconds
)

# Data-specific caching
cached_processing <- create_cached_reactive(
  {
    expensive_data_processing(data)
  },
  function() paste0("processing_", digest::digest(data)),
  CACHE_CONFIG$default_timeout_seconds
)

}
\seealso{
Other performance: 
\code{\link{clear_performance_cache}()},
\code{\link{create_performance_debounced}()},
\code{\link{evaluate_data_content_cached}()},
\code{\link{get_performance_stats}()},
\code{\link{measure_reactive_performance}()},
\code{\link{monitor_memory_usage}()}
}
\concept{performance}
