% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_spc_bfh_service.R
\name{classify_error_source}
\alias{classify_error_source}
\title{Classify Error Source for Attribution}
\usage{
classify_error_source(error)
}
\arguments{
\item{error}{Error object (condition) from tryCatch}
}
\value{
List with classification metadata:
\describe{
\item{source}{Character. Error source: "BFHcharts", "SPCify", "User Data", "Unknown"}
\item{component}{Character. Log component tag (e.g., "\link{BFH_INTEGRATION}")}
\item{actionable_by}{Character. Who can fix this error}
\item{escalate}{Logical. Should this be escalated externally?}
\item{user_message}{Character. User-friendly error message}
}
}
\description{
Analyzes error messages and stack traces to attribute errors to the correct
component (BFHcharts, SPCify, or User Data). Enables actionable error messages
and proper escalation.
}
\details{
\strong{Classification Logic:}
\itemize{
\item \strong{BFHcharts errors:} API errors, calculation errors → Escalate to package maintainer
\item \strong{SPCify errors:} Validation errors, missing columns → Fix in SPCify
\item \strong{User Data errors:} Empty data, invalid values → User action needed
}

\strong{Decision Tree:}
\enumerate{
\item Check for BFHcharts-specific patterns (package namespace, function names)
\item Check for SPCify validation patterns (missing columns, invalid types)
\item Check for data quality patterns (empty, null, NA)
\item Default to unknown (requires investigation)
}

\strong{Actionability:}
Each classification includes:
\itemize{
\item Error source (component name)
\item Component tag for logging
\item Actionable by (who can fix it)
\item Escalate flag (needs external attention)
}
}
\examples{
\dontrun{
# BFHcharts API error
tryCatch(
  BFHcharts::create_chart(...),
  error = function(e) {
    classification <- classify_error_source(e)
    # Returns: list(source = "BFHcharts", escalate = TRUE, ...)
  }
)

# Validation error
tryCatch(
  validate_bfh_inputs(data, config),
  error = function(e) {
    classification <- classify_error_source(e)
    # Returns: list(source = "SPCify", escalate = FALSE, ...)
  }
)
}
}
